Why are closures useful in JavaScript? Give an example use case.
Closures is a feature of JavaScript that allows for a inner function to have access to outer function's variables. This is useful as it allows you to encapsulate functionality and hide implementation details, create functions that can generate other functions with shard environments. Closure also allow for asynchronous operations which is useful for callback, promises, and event handlers to maintain state or pass parameters. 

Example

function createAdder(x){
	return function(y){
		return x + y;
	};
}

const add5 = createAdder(5);

const add10 = createAdder(10);

console.log(add5(2)); //7
console.log(add10(2)); //12

this a function that can create more function for the purpose of adding different numbers to a number. The inner function has access to x in the outer function to allow for it to make the created function that adds x 

When should you choose to use “let” or “const”

const is used for a constant variable. So you would only use it for variables that should not change or objects that should only have one reference point.

let can be reassigned new values. So it is used when a variable or object needs to be redefined within a scope. 


Give an example of a common mistake related to hoisting and explain how to fix it.

A common mistake related to hoisting is variables that are needed by the console are defined but are not initialized before the console call.

example is this
console.log(name);

var name = 'Schipper';

console.log(name);

when javascript runs this name will be hoist the variable name but it will not be defined leading to the first console.log to error out.

The results with let and const are the same as the are also hoisted but the error out with reference error instead of undefined error.

The fix for this is to initialize the variables before they are used.


What will the outcome of each console.log() be after the function calls? Why?
const arr = [1, 2];
function foo1(arg) {
  arg.push(3);
}
foo1(arr);
console.log(arr);

Outcome: '[1, 2, 3]'
The reason why is the arg in foo1 is referencing arr with arr already being defined and the function pushing 3 into the array.

function foo2(arg) {
  arg = [1, 2, 3, 4];
}
foo2(arr);
console.log(arr);

Outcome: '[1, 2, 3]'
The reason why the outcome stays the same is the reassignment does not affect the arr outside the function because arg is pointing to a new array. 

function foo3(arg) {
  let b = arg;
  b.push(3);
}
foo3(arr);
console.log(arr);

Outcome: '[1, 2, 3, 3]'
This function assign arg to b that references arr when called with the push operation it modifies the original array in arr.


function foo4(arg) {
  let b = arg;
  b = [1, 2, 3, 4];
}
foo4(arr);
console.log(arr);

Outcome: '[1, 2, 3, 3]'
This function assign arg to b which references arr but because b is reassigned a new array it doesn't modify the original array arr.
